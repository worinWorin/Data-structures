#include <stdio.h>
#define MAX_QUEUE_SIZE 100

typedef int element;
typedef struct
{
	element queue[MAX_QUEUE_SIZE];
	int front, near;
}QueueType;

// 오류 처리 함수
void error(char *message)
{
	fprintf(stderr, "%s\n", message);
	exit(1);
}
// 초기화 함수
void Init(QueueType *q)
{
	q->front = q->near = 0;
}
// 공백 상태 함수
int is_empty(QueueType *q)
{
	return (q->front == q->near);
}
// 포화 상태 함수
int is_full(QueueType *q)
{
	return ((q->near + 1) % MAX_QUEUE_SIZE == q->front);
}



// 삽입 함수
void enqueue(QueueType *q, element item)
{
	if (is_full(q)) error("포화\n");
	q->near = (q->near + 1) % MAX_QUEUE_SIZE;
	q->queue[q->near] = item;
}
// 삭제 함수
element dequeue(QueueType *q)
{
	if (is_empty(q)) error("공백\n");
	q->front = (q->front + 1) % MAX_QUEUE_SIZE;
	return q->queue[q->front];
}
// 피크 함수
element peek(QueueType *q)
{
	if (is_empty(q)) error("공백\n");
	return q->queue[(q->front) + 1] % MAX_QUEUE_SIZE;
}
// 주 함수
int main()
{
	QueueType q;
	Init(&q);
	printf("front = %d, near = %d\n", q.front, q.near);
	enqueue(&q, 1);
	enqueue(&q, 2);
	enqueue(&q, 3);
	printf("dequeue() = %d\n", dequeue(&q));
	printf("dequeue() = %d\n", dequeue(&q));
	printf("dequeue() = %d\n", dequeue(&q));
	printf("front = %d, near = %d\n", q.front, q.near);
}
